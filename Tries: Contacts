#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
using namespace std;

struct TrieNode
{
    struct TrieNode *children[26];
    int count_children[26];
    bool isEndOfWord;
};

struct TrieNode *getNode(void){
    struct TrieNode *pNode = new TrieNode;
    for(int i=0;i<26;i++){
        pNode->children[i] = NULL;
        pNode->count_children[i]=0;
    }
    pNode->isEndOfWord = false;
    return pNode;
}

void insert(struct TrieNode *root, string keys){
    struct TrieNode *pCrawl = root;
    for(int i=0;i<keys.length();i++){
        int index = keys[i] - 'a';
        if(!pCrawl->children[index]){
            pCrawl->children[index] = getNode();
            pCrawl->count_children[index]+=1;
        }
        else{
            pCrawl->count_children[index]+=1;
        }
        //cout << keys[i] << " " << pCrawl->count_children[i] << endl;
        pCrawl = pCrawl->children[index];
    }
    pCrawl->isEndOfWord = true;
}

int search(struct TrieNode *root, string search_keys){
    struct TrieNode *pSearch = root;
    int count =0;
    int count_1=0;
    int index=0;
    for(int i=0;i<search_keys.length();i++){
        index = search_keys[i] - 'a';
        if(!pSearch->children[index])
            return 0;
        count_1 = pSearch->count_children[index];
        pSearch = pSearch->children[index];
        //cout << index <<endl;
    }
    //cout << count_1 << endl;
    count = count + count_1;
    return count;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    int n;
    string s;
    string ch;
    cin >> n;
    int k=0;
    struct TrieNode *root = getNode();
    vector <string> add(n);
    for(int i=0;i<n;i++){
        int count =0 ;
        cin >>s >> ch;
        if(!s.compare("add")){
            insert(root,ch);
        }
        else if(!s.compare("find")){
            count = count + search(root,ch);
            cout << count << endl;
        }
    }
    return 0;
}
