#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std; 
// A function to merge the two half into a sorted data.
long long Merge(vector<int> &a, int low, int high, int mid)
{
    long long numOfInversions = 0;
    
	// We have low to mid and mid+1 to high already sorted.
	int i, j, k, temp[high-low+1];
	i = low;
	k = 0;
	j = mid + 1;
 
	// Merge the two parts into temp[].
	while (i <= mid && j <= high)
	{
		if (a[i] <= a[j])
		{
			temp[k] = a[i];
			k++;
			i++;
		}
		else
		{
			temp[k] = a[j];
			k++;
			j++;
            numOfInversions += mid - i + 1;
		}
	}
 
	// Insert all the remaining values from i to mid into temp[].
	while (i <= mid)
	{
		temp[k] = a[i];
		k++;
		i++;
	}
 
	// Insert all the remaining values from j to high into temp[].
	while (j <= high)
	{
		temp[k] = a[j];
		k++;
		j++;
	}
 
 
	// Assign sorted data stored in temp[] to a[].
	for (i = low; i <= high; i++)
	{
		a[i] = temp[i-low];
	}
    
    return numOfInversions;
}
 
// A function to split array into two parts.
long long MergeSort(vector<int> &a, int low, int high)
{
	int mid;
	if (low < high)
	{
		mid=(low+high)/2;
        
		// Split the data into two half.
		return MergeSort(a, low, mid) 
       		+ MergeSort(a, mid+1, high) 
 		    + Merge(a, low, high, mid);
	}  
    
    return 0;
}
 
long long count_inversions(vector<int> a) {
  return MergeSort(a, 0, a.size()-1);  
}


int main(){
    int t;
    cin >> t;
    for(int a = 0; a < t; a++){
        int n;
        cin >> n;
        vector<int> arr(n);
        for(int arr_i = 0;arr_i < n;arr_i++){
           cin >> arr[arr_i];
        }
        cout << count_inversions(arr) << endl;
    }
    return 0;
}
